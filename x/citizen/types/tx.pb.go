// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: citizen/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgTransferOwnership struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NewOwner string `protobuf:"bytes,2,opt,name=newOwner,proto3" json:"newOwner,omitempty"`
}

func (m *MsgTransferOwnership) Reset()         { *m = MsgTransferOwnership{} }
func (m *MsgTransferOwnership) String() string { return proto.CompactTextString(m) }
func (*MsgTransferOwnership) ProtoMessage()    {}
func (*MsgTransferOwnership) Descriptor() ([]byte, []int) {
	return fileDescriptor_407143062e375738, []int{0}
}
func (m *MsgTransferOwnership) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferOwnership) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferOwnership.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferOwnership) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferOwnership.Merge(m, src)
}
func (m *MsgTransferOwnership) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferOwnership) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferOwnership.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferOwnership proto.InternalMessageInfo

func (m *MsgTransferOwnership) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTransferOwnership) GetNewOwner() string {
	if m != nil {
		return m.NewOwner
	}
	return ""
}

type MsgTransferOwnershipResponse struct {
}

func (m *MsgTransferOwnershipResponse) Reset()         { *m = MsgTransferOwnershipResponse{} }
func (m *MsgTransferOwnershipResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferOwnershipResponse) ProtoMessage()    {}
func (*MsgTransferOwnershipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_407143062e375738, []int{1}
}
func (m *MsgTransferOwnershipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferOwnershipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferOwnershipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferOwnershipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferOwnershipResponse.Merge(m, src)
}
func (m *MsgTransferOwnershipResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferOwnershipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferOwnershipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferOwnershipResponse proto.InternalMessageInfo

type MsgMintCitizen struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	To          string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	CitizenId   string `protobuf:"bytes,3,opt,name=citizenId,proto3" json:"citizenId,omitempty"`
	Title       string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Uri         string `protobuf:"bytes,6,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (m *MsgMintCitizen) Reset()         { *m = MsgMintCitizen{} }
func (m *MsgMintCitizen) String() string { return proto.CompactTextString(m) }
func (*MsgMintCitizen) ProtoMessage()    {}
func (*MsgMintCitizen) Descriptor() ([]byte, []int) {
	return fileDescriptor_407143062e375738, []int{2}
}
func (m *MsgMintCitizen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintCitizen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintCitizen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintCitizen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintCitizen.Merge(m, src)
}
func (m *MsgMintCitizen) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintCitizen) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintCitizen.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintCitizen proto.InternalMessageInfo

func (m *MsgMintCitizen) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMintCitizen) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *MsgMintCitizen) GetCitizenId() string {
	if m != nil {
		return m.CitizenId
	}
	return ""
}

func (m *MsgMintCitizen) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgMintCitizen) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgMintCitizen) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

type MsgMintCitizenResponse struct {
	Citizen *Citizen `protobuf:"bytes,1,opt,name=citizen,proto3" json:"citizen,omitempty"`
}

func (m *MsgMintCitizenResponse) Reset()         { *m = MsgMintCitizenResponse{} }
func (m *MsgMintCitizenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintCitizenResponse) ProtoMessage()    {}
func (*MsgMintCitizenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_407143062e375738, []int{3}
}
func (m *MsgMintCitizenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintCitizenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintCitizenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintCitizenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintCitizenResponse.Merge(m, src)
}
func (m *MsgMintCitizenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintCitizenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintCitizenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintCitizenResponse proto.InternalMessageInfo

func (m *MsgMintCitizenResponse) GetCitizen() *Citizen {
	if m != nil {
		return m.Citizen
	}
	return nil
}

type MsgApprove struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CitizenId  string `protobuf:"bytes,2,opt,name=citizenId,proto3" json:"citizenId,omitempty"`
	Operator   string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	IsApproval bool   `protobuf:"varint,4,opt,name=isApproval,proto3" json:"isApproval,omitempty"`
}

func (m *MsgApprove) Reset()         { *m = MsgApprove{} }
func (m *MsgApprove) String() string { return proto.CompactTextString(m) }
func (*MsgApprove) ProtoMessage()    {}
func (*MsgApprove) Descriptor() ([]byte, []int) {
	return fileDescriptor_407143062e375738, []int{4}
}
func (m *MsgApprove) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApprove) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApprove.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApprove) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApprove.Merge(m, src)
}
func (m *MsgApprove) XXX_Size() int {
	return m.Size()
}
func (m *MsgApprove) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApprove.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApprove proto.InternalMessageInfo

func (m *MsgApprove) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgApprove) GetCitizenId() string {
	if m != nil {
		return m.CitizenId
	}
	return ""
}

func (m *MsgApprove) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgApprove) GetIsApproval() bool {
	if m != nil {
		return m.IsApproval
	}
	return false
}

type MsgApproveResponse struct {
}

func (m *MsgApproveResponse) Reset()         { *m = MsgApproveResponse{} }
func (m *MsgApproveResponse) String() string { return proto.CompactTextString(m) }
func (*MsgApproveResponse) ProtoMessage()    {}
func (*MsgApproveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_407143062e375738, []int{5}
}
func (m *MsgApproveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApproveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApproveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApproveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApproveResponse.Merge(m, src)
}
func (m *MsgApproveResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgApproveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApproveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApproveResponse proto.InternalMessageInfo

type MsgSetApproveForAll struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Operator        string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	IsApproveForAll bool   `protobuf:"varint,3,opt,name=isApproveForAll,proto3" json:"isApproveForAll,omitempty"`
}

func (m *MsgSetApproveForAll) Reset()         { *m = MsgSetApproveForAll{} }
func (m *MsgSetApproveForAll) String() string { return proto.CompactTextString(m) }
func (*MsgSetApproveForAll) ProtoMessage()    {}
func (*MsgSetApproveForAll) Descriptor() ([]byte, []int) {
	return fileDescriptor_407143062e375738, []int{6}
}
func (m *MsgSetApproveForAll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetApproveForAll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetApproveForAll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetApproveForAll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetApproveForAll.Merge(m, src)
}
func (m *MsgSetApproveForAll) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetApproveForAll) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetApproveForAll.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetApproveForAll proto.InternalMessageInfo

func (m *MsgSetApproveForAll) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetApproveForAll) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *MsgSetApproveForAll) GetIsApproveForAll() bool {
	if m != nil {
		return m.IsApproveForAll
	}
	return false
}

type MsgSetApproveForAllResponse struct {
}

func (m *MsgSetApproveForAllResponse) Reset()         { *m = MsgSetApproveForAllResponse{} }
func (m *MsgSetApproveForAllResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetApproveForAllResponse) ProtoMessage()    {}
func (*MsgSetApproveForAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_407143062e375738, []int{7}
}
func (m *MsgSetApproveForAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetApproveForAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetApproveForAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetApproveForAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetApproveForAllResponse.Merge(m, src)
}
func (m *MsgSetApproveForAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetApproveForAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetApproveForAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetApproveForAllResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgTransferOwnership)(nil), "demoonechain.citizen.MsgTransferOwnership")
	proto.RegisterType((*MsgTransferOwnershipResponse)(nil), "demoonechain.citizen.MsgTransferOwnershipResponse")
	proto.RegisterType((*MsgMintCitizen)(nil), "demoonechain.citizen.MsgMintCitizen")
	proto.RegisterType((*MsgMintCitizenResponse)(nil), "demoonechain.citizen.MsgMintCitizenResponse")
	proto.RegisterType((*MsgApprove)(nil), "demoonechain.citizen.MsgApprove")
	proto.RegisterType((*MsgApproveResponse)(nil), "demoonechain.citizen.MsgApproveResponse")
	proto.RegisterType((*MsgSetApproveForAll)(nil), "demoonechain.citizen.MsgSetApproveForAll")
	proto.RegisterType((*MsgSetApproveForAllResponse)(nil), "demoonechain.citizen.MsgSetApproveForAllResponse")
}

func init() { proto.RegisterFile("citizen/tx.proto", fileDescriptor_407143062e375738) }

var fileDescriptor_407143062e375738 = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xce, 0x6e, 0x68, 0x93, 0x4e, 0xa4, 0x12, 0x4c, 0x40, 0xab, 0xa5, 0xb1, 0xa2, 0x15, 0x87,
	0x80, 0x20, 0x11, 0xe1, 0xd0, 0x73, 0x41, 0x42, 0x42, 0x62, 0x85, 0x08, 0x70, 0xe1, 0xb6, 0x24,
	0x66, 0x6b, 0x29, 0xd8, 0x96, 0xed, 0xd2, 0xc2, 0x89, 0x47, 0xe0, 0x19, 0x38, 0xf0, 0x2c, 0x1c,
	0x7b, 0xe4, 0x88, 0x92, 0x17, 0x41, 0xf5, 0xda, 0xee, 0x76, 0xbb, 0x09, 0x39, 0xed, 0xce, 0xcc,
	0x37, 0xf3, 0x7d, 0xf3, 0x23, 0x43, 0x77, 0x46, 0x35, 0xfd, 0x46, 0xd8, 0x58, 0x9f, 0x8d, 0x84,
	0xe4, 0x9a, 0xa3, 0xde, 0x9c, 0x7c, 0xe6, 0x9c, 0x91, 0xd9, 0x71, 0x46, 0xd9, 0xc8, 0x86, 0xe3,
	0x3b, 0x0e, 0x67, 0xbf, 0x05, 0x38, 0x79, 0x05, 0xbd, 0x54, 0xe5, 0xef, 0x64, 0xc6, 0xd4, 0x27,
	0x22, 0x5f, 0x9f, 0x32, 0x22, 0xd5, 0x31, 0x15, 0x28, 0x82, 0xd6, 0x4c, 0x92, 0x4c, 0x73, 0x19,
	0x05, 0x83, 0x60, 0xb8, 0x37, 0x75, 0x26, 0x8a, 0xa1, 0xcd, 0xc8, 0xa9, 0x41, 0x46, 0xa1, 0x09,
	0x79, 0x3b, 0xc1, 0x70, 0x50, 0x57, 0x6d, 0x4a, 0x94, 0xe0, 0x4c, 0x91, 0xe4, 0x67, 0x00, 0xfb,
	0xa9, 0xca, 0x53, 0xca, 0xf4, 0xf3, 0x42, 0xc6, 0x06, 0xa2, 0x7d, 0x08, 0x35, 0xb7, 0x14, 0xa1,
	0xe6, 0xe8, 0x00, 0xf6, 0xac, 0xf6, 0x97, 0xf3, 0xa8, 0x69, 0xdc, 0x97, 0x0e, 0xd4, 0x83, 0x1d,
	0x4d, 0xf5, 0x82, 0x44, 0x37, 0x4c, 0xa4, 0x30, 0xd0, 0x00, 0x3a, 0x73, 0xa2, 0x66, 0x92, 0x0a,
	0x4d, 0x39, 0x8b, 0x76, 0x4c, 0xac, 0xec, 0x42, 0x5d, 0x68, 0x9e, 0x48, 0x1a, 0xed, 0x9a, 0xc8,
	0xc5, 0x6f, 0xf2, 0x06, 0xee, 0x5e, 0xd5, 0xe8, 0xe4, 0xa3, 0x43, 0x68, 0x59, 0x42, 0xa3, 0xb5,
	0x33, 0xe9, 0x8f, 0xea, 0x66, 0x3d, 0x72, 0x79, 0x0e, 0x9d, 0x7c, 0x0f, 0x00, 0x52, 0x95, 0x1f,
	0x09, 0x21, 0xf9, 0x17, 0xb2, 0xa1, 0xe7, 0x2b, 0x3d, 0x86, 0xd5, 0x1e, 0x63, 0x68, 0x73, 0x41,
	0xa4, 0x49, 0x2c, 0x06, 0xe0, 0x6d, 0x84, 0x01, 0xa8, 0x2a, 0x08, 0xb2, 0x85, 0x19, 0x42, 0x7b,
	0x5a, 0xf2, 0x24, 0x3d, 0x40, 0x97, 0x0a, 0xfc, 0x42, 0x4e, 0xe0, 0x76, 0xaa, 0xf2, 0xb7, 0x44,
	0xdb, 0xc0, 0x0b, 0x2e, 0x8f, 0x16, 0x8b, 0xcd, 0xdb, 0xf7, 0x12, 0xc2, 0x8a, 0x84, 0x21, 0xdc,
	0x74, 0x84, 0xb6, 0x90, 0x51, 0xd9, 0x9e, 0x56, 0xdd, 0x49, 0x1f, 0xee, 0xd5, 0xd0, 0x3a, 0x55,
	0x93, 0x5f, 0x4d, 0x68, 0xa6, 0x2a, 0x47, 0x0a, 0x6e, 0x5d, 0xbf, 0xcc, 0x87, 0xf5, 0x33, 0xaf,
	0xbb, 0xbb, 0x78, 0xb2, 0x3d, 0xd6, 0x2f, 0x39, 0x83, 0x4e, 0xf9, 0x3e, 0xef, 0xaf, 0x2d, 0x51,
	0x42, 0xc5, 0x8f, 0xb6, 0x41, 0x79, 0x8a, 0xf7, 0xd0, 0x72, 0xa7, 0x30, 0x58, 0x9b, 0x68, 0x11,
	0xf1, 0xf0, 0x7f, 0x08, 0x5f, 0x56, 0x40, 0xf7, 0xda, 0x26, 0x1f, 0xac, 0xcd, 0xae, 0x42, 0xe3,
	0x27, 0x5b, 0x43, 0x1d, 0xe3, 0xb3, 0xc3, 0xdf, 0x4b, 0x1c, 0x9c, 0x2f, 0x71, 0xf0, 0x77, 0x89,
	0x83, 0x1f, 0x2b, 0xdc, 0x38, 0x5f, 0xe1, 0xc6, 0x9f, 0x15, 0x6e, 0x7c, 0xe8, 0x5f, 0xd4, 0x7a,
	0xec, 0x8a, 0x8d, 0xcf, 0xc6, 0xfe, 0x99, 0xfa, 0x2a, 0x88, 0xfa, 0xb8, 0x6b, 0x5e, 0x9f, 0xa7,
	0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3a, 0xe5, 0x62, 0x1f, 0xbe, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	TransferOwnership(ctx context.Context, in *MsgTransferOwnership, opts ...grpc.CallOption) (*MsgTransferOwnershipResponse, error)
	MintCitizen(ctx context.Context, in *MsgMintCitizen, opts ...grpc.CallOption) (*MsgMintCitizenResponse, error)
	Approve(ctx context.Context, in *MsgApprove, opts ...grpc.CallOption) (*MsgApproveResponse, error)
	SetApproveForAll(ctx context.Context, in *MsgSetApproveForAll, opts ...grpc.CallOption) (*MsgSetApproveForAllResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) TransferOwnership(ctx context.Context, in *MsgTransferOwnership, opts ...grpc.CallOption) (*MsgTransferOwnershipResponse, error) {
	out := new(MsgTransferOwnershipResponse)
	err := c.cc.Invoke(ctx, "/demoonechain.citizen.Msg/TransferOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintCitizen(ctx context.Context, in *MsgMintCitizen, opts ...grpc.CallOption) (*MsgMintCitizenResponse, error) {
	out := new(MsgMintCitizenResponse)
	err := c.cc.Invoke(ctx, "/demoonechain.citizen.Msg/MintCitizen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Approve(ctx context.Context, in *MsgApprove, opts ...grpc.CallOption) (*MsgApproveResponse, error) {
	out := new(MsgApproveResponse)
	err := c.cc.Invoke(ctx, "/demoonechain.citizen.Msg/Approve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetApproveForAll(ctx context.Context, in *MsgSetApproveForAll, opts ...grpc.CallOption) (*MsgSetApproveForAllResponse, error) {
	out := new(MsgSetApproveForAllResponse)
	err := c.cc.Invoke(ctx, "/demoonechain.citizen.Msg/SetApproveForAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	TransferOwnership(context.Context, *MsgTransferOwnership) (*MsgTransferOwnershipResponse, error)
	MintCitizen(context.Context, *MsgMintCitizen) (*MsgMintCitizenResponse, error)
	Approve(context.Context, *MsgApprove) (*MsgApproveResponse, error)
	SetApproveForAll(context.Context, *MsgSetApproveForAll) (*MsgSetApproveForAllResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) TransferOwnership(ctx context.Context, req *MsgTransferOwnership) (*MsgTransferOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwnership not implemented")
}
func (*UnimplementedMsgServer) MintCitizen(ctx context.Context, req *MsgMintCitizen) (*MsgMintCitizenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintCitizen not implemented")
}
func (*UnimplementedMsgServer) Approve(ctx context.Context, req *MsgApprove) (*MsgApproveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}
func (*UnimplementedMsgServer) SetApproveForAll(ctx context.Context, req *MsgSetApproveForAll) (*MsgSetApproveForAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApproveForAll not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_TransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferOwnership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoonechain.citizen.Msg/TransferOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferOwnership(ctx, req.(*MsgTransferOwnership))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintCitizen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintCitizen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintCitizen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoonechain.citizen.Msg/MintCitizen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintCitizen(ctx, req.(*MsgMintCitizen))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApprove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoonechain.citizen.Msg/Approve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Approve(ctx, req.(*MsgApprove))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetApproveForAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetApproveForAll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetApproveForAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoonechain.citizen.Msg/SetApproveForAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetApproveForAll(ctx, req.(*MsgSetApproveForAll))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "demoonechain.citizen.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransferOwnership",
			Handler:    _Msg_TransferOwnership_Handler,
		},
		{
			MethodName: "MintCitizen",
			Handler:    _Msg_MintCitizen_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _Msg_Approve_Handler,
		},
		{
			MethodName: "SetApproveForAll",
			Handler:    _Msg_SetApproveForAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "citizen/tx.proto",
}

func (m *MsgTransferOwnership) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferOwnership) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferOwnership) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewOwner) > 0 {
		i -= len(m.NewOwner)
		copy(dAtA[i:], m.NewOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewOwner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferOwnershipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferOwnershipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferOwnershipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMintCitizen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintCitizen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintCitizen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CitizenId) > 0 {
		i -= len(m.CitizenId)
		copy(dAtA[i:], m.CitizenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CitizenId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTx(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintCitizenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintCitizenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintCitizenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Citizen != nil {
		{
			size, err := m.Citizen.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgApprove) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApprove) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApprove) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsApproval {
		i--
		if m.IsApproval {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CitizenId) > 0 {
		i -= len(m.CitizenId)
		copy(dAtA[i:], m.CitizenId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CitizenId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgApproveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApproveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApproveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetApproveForAll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetApproveForAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetApproveForAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsApproveForAll {
		i--
		if m.IsApproveForAll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetApproveForAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetApproveForAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetApproveForAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgTransferOwnership) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTransferOwnershipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMintCitizen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CitizenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMintCitizenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Citizen != nil {
		l = m.Citizen.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgApprove) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CitizenId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IsApproval {
		n += 2
	}
	return n
}

func (m *MsgApproveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetApproveForAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IsApproveForAll {
		n += 2
	}
	return n
}

func (m *MsgSetApproveForAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgTransferOwnership) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferOwnership: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferOwnership: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferOwnershipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferOwnershipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferOwnershipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintCitizen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintCitizen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintCitizen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CitizenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CitizenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintCitizenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintCitizenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintCitizenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Citizen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Citizen == nil {
				m.Citizen = &Citizen{}
			}
			if err := m.Citizen.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApprove) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApprove: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApprove: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CitizenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CitizenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsApproval", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsApproval = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApproveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApproveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApproveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetApproveForAll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetApproveForAll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetApproveForAll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsApproveForAll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsApproveForAll = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetApproveForAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetApproveForAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetApproveForAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
