// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: citizen/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetOwnerRequest struct {
}

func (m *QueryGetOwnerRequest) Reset()         { *m = QueryGetOwnerRequest{} }
func (m *QueryGetOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOwnerRequest) ProtoMessage()    {}
func (*QueryGetOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{2}
}
func (m *QueryGetOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOwnerRequest.Merge(m, src)
}
func (m *QueryGetOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOwnerRequest proto.InternalMessageInfo

type QueryGetOwnerResponse struct {
	Owner Owner `protobuf:"bytes,1,opt,name=Owner,proto3" json:"Owner"`
}

func (m *QueryGetOwnerResponse) Reset()         { *m = QueryGetOwnerResponse{} }
func (m *QueryGetOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOwnerResponse) ProtoMessage()    {}
func (*QueryGetOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{3}
}
func (m *QueryGetOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOwnerResponse.Merge(m, src)
}
func (m *QueryGetOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOwnerResponse proto.InternalMessageInfo

func (m *QueryGetOwnerResponse) GetOwner() Owner {
	if m != nil {
		return m.Owner
	}
	return Owner{}
}

type QueryModuleOwnerRequest struct {
}

func (m *QueryModuleOwnerRequest) Reset()         { *m = QueryModuleOwnerRequest{} }
func (m *QueryModuleOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryModuleOwnerRequest) ProtoMessage()    {}
func (*QueryModuleOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{4}
}
func (m *QueryModuleOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleOwnerRequest.Merge(m, src)
}
func (m *QueryModuleOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleOwnerRequest proto.InternalMessageInfo

type QueryModuleOwnerResponse struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryModuleOwnerResponse) Reset()         { *m = QueryModuleOwnerResponse{} }
func (m *QueryModuleOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryModuleOwnerResponse) ProtoMessage()    {}
func (*QueryModuleOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{5}
}
func (m *QueryModuleOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleOwnerResponse.Merge(m, src)
}
func (m *QueryModuleOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleOwnerResponse proto.InternalMessageInfo

func (m *QueryModuleOwnerResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryGetCitizenRequest struct {
	CitizenId string `protobuf:"bytes,1,opt,name=citizenId,proto3" json:"citizenId,omitempty"`
}

func (m *QueryGetCitizenRequest) Reset()         { *m = QueryGetCitizenRequest{} }
func (m *QueryGetCitizenRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCitizenRequest) ProtoMessage()    {}
func (*QueryGetCitizenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{6}
}
func (m *QueryGetCitizenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCitizenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCitizenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCitizenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCitizenRequest.Merge(m, src)
}
func (m *QueryGetCitizenRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCitizenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCitizenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCitizenRequest proto.InternalMessageInfo

func (m *QueryGetCitizenRequest) GetCitizenId() string {
	if m != nil {
		return m.CitizenId
	}
	return ""
}

type QueryGetCitizenResponse struct {
	Citizen Citizen `protobuf:"bytes,1,opt,name=citizen,proto3" json:"citizen"`
}

func (m *QueryGetCitizenResponse) Reset()         { *m = QueryGetCitizenResponse{} }
func (m *QueryGetCitizenResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCitizenResponse) ProtoMessage()    {}
func (*QueryGetCitizenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{7}
}
func (m *QueryGetCitizenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCitizenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCitizenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCitizenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCitizenResponse.Merge(m, src)
}
func (m *QueryGetCitizenResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCitizenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCitizenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCitizenResponse proto.InternalMessageInfo

func (m *QueryGetCitizenResponse) GetCitizen() Citizen {
	if m != nil {
		return m.Citizen
	}
	return Citizen{}
}

type QueryAllCitizenRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCitizenRequest) Reset()         { *m = QueryAllCitizenRequest{} }
func (m *QueryAllCitizenRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCitizenRequest) ProtoMessage()    {}
func (*QueryAllCitizenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{8}
}
func (m *QueryAllCitizenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCitizenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCitizenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCitizenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCitizenRequest.Merge(m, src)
}
func (m *QueryAllCitizenRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCitizenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCitizenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCitizenRequest proto.InternalMessageInfo

func (m *QueryAllCitizenRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCitizenResponse struct {
	Citizen    []Citizen           `protobuf:"bytes,1,rep,name=citizen,proto3" json:"citizen"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCitizenResponse) Reset()         { *m = QueryAllCitizenResponse{} }
func (m *QueryAllCitizenResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCitizenResponse) ProtoMessage()    {}
func (*QueryAllCitizenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{9}
}
func (m *QueryAllCitizenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCitizenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCitizenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCitizenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCitizenResponse.Merge(m, src)
}
func (m *QueryAllCitizenResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCitizenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCitizenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCitizenResponse proto.InternalMessageInfo

func (m *QueryAllCitizenResponse) GetCitizen() []Citizen {
	if m != nil {
		return m.Citizen
	}
	return nil
}

func (m *QueryAllCitizenResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCitizenOwnerRequest struct {
	CitizenId string `protobuf:"bytes,1,opt,name=citizenId,proto3" json:"citizenId,omitempty"`
}

func (m *QueryGetCitizenOwnerRequest) Reset()         { *m = QueryGetCitizenOwnerRequest{} }
func (m *QueryGetCitizenOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCitizenOwnerRequest) ProtoMessage()    {}
func (*QueryGetCitizenOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{10}
}
func (m *QueryGetCitizenOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCitizenOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCitizenOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCitizenOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCitizenOwnerRequest.Merge(m, src)
}
func (m *QueryGetCitizenOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCitizenOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCitizenOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCitizenOwnerRequest proto.InternalMessageInfo

func (m *QueryGetCitizenOwnerRequest) GetCitizenId() string {
	if m != nil {
		return m.CitizenId
	}
	return ""
}

type QueryGetCitizenOwnerResponse struct {
	CitizenOwner CitizenOwner `protobuf:"bytes,1,opt,name=citizenOwner,proto3" json:"citizenOwner"`
}

func (m *QueryGetCitizenOwnerResponse) Reset()         { *m = QueryGetCitizenOwnerResponse{} }
func (m *QueryGetCitizenOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCitizenOwnerResponse) ProtoMessage()    {}
func (*QueryGetCitizenOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{11}
}
func (m *QueryGetCitizenOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCitizenOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCitizenOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCitizenOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCitizenOwnerResponse.Merge(m, src)
}
func (m *QueryGetCitizenOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCitizenOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCitizenOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCitizenOwnerResponse proto.InternalMessageInfo

func (m *QueryGetCitizenOwnerResponse) GetCitizenOwner() CitizenOwner {
	if m != nil {
		return m.CitizenOwner
	}
	return CitizenOwner{}
}

type QueryAllCitizenOwnerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCitizenOwnerRequest) Reset()         { *m = QueryAllCitizenOwnerRequest{} }
func (m *QueryAllCitizenOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCitizenOwnerRequest) ProtoMessage()    {}
func (*QueryAllCitizenOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{12}
}
func (m *QueryAllCitizenOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCitizenOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCitizenOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCitizenOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCitizenOwnerRequest.Merge(m, src)
}
func (m *QueryAllCitizenOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCitizenOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCitizenOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCitizenOwnerRequest proto.InternalMessageInfo

func (m *QueryAllCitizenOwnerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCitizenOwnerResponse struct {
	CitizenOwner []CitizenOwner      `protobuf:"bytes,1,rep,name=citizenOwner,proto3" json:"citizenOwner"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCitizenOwnerResponse) Reset()         { *m = QueryAllCitizenOwnerResponse{} }
func (m *QueryAllCitizenOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCitizenOwnerResponse) ProtoMessage()    {}
func (*QueryAllCitizenOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{13}
}
func (m *QueryAllCitizenOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCitizenOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCitizenOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCitizenOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCitizenOwnerResponse.Merge(m, src)
}
func (m *QueryAllCitizenOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCitizenOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCitizenOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCitizenOwnerResponse proto.InternalMessageInfo

func (m *QueryAllCitizenOwnerResponse) GetCitizenOwner() []CitizenOwner {
	if m != nil {
		return m.CitizenOwner
	}
	return nil
}

func (m *QueryAllCitizenOwnerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCitizenIdsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetCitizenIdsRequest) Reset()         { *m = QueryGetCitizenIdsRequest{} }
func (m *QueryGetCitizenIdsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCitizenIdsRequest) ProtoMessage()    {}
func (*QueryGetCitizenIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{14}
}
func (m *QueryGetCitizenIdsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCitizenIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCitizenIdsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCitizenIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCitizenIdsRequest.Merge(m, src)
}
func (m *QueryGetCitizenIdsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCitizenIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCitizenIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCitizenIdsRequest proto.InternalMessageInfo

func (m *QueryGetCitizenIdsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetCitizenIdsResponse struct {
	CitizenIds CitizenIds `protobuf:"bytes,1,opt,name=CitizenIds,proto3" json:"CitizenIds"`
}

func (m *QueryGetCitizenIdsResponse) Reset()         { *m = QueryGetCitizenIdsResponse{} }
func (m *QueryGetCitizenIdsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCitizenIdsResponse) ProtoMessage()    {}
func (*QueryGetCitizenIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{15}
}
func (m *QueryGetCitizenIdsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCitizenIdsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCitizenIdsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCitizenIdsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCitizenIdsResponse.Merge(m, src)
}
func (m *QueryGetCitizenIdsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCitizenIdsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCitizenIdsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCitizenIdsResponse proto.InternalMessageInfo

func (m *QueryGetCitizenIdsResponse) GetCitizenIds() CitizenIds {
	if m != nil {
		return m.CitizenIds
	}
	return CitizenIds{}
}

type QueryAllCitizenIdsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCitizenIdsRequest) Reset()         { *m = QueryAllCitizenIdsRequest{} }
func (m *QueryAllCitizenIdsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCitizenIdsRequest) ProtoMessage()    {}
func (*QueryAllCitizenIdsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{16}
}
func (m *QueryAllCitizenIdsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCitizenIdsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCitizenIdsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCitizenIdsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCitizenIdsRequest.Merge(m, src)
}
func (m *QueryAllCitizenIdsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCitizenIdsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCitizenIdsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCitizenIdsRequest proto.InternalMessageInfo

func (m *QueryAllCitizenIdsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCitizenIdsResponse struct {
	CitizenIds []CitizenIds        `protobuf:"bytes,1,rep,name=CitizenIds,proto3" json:"CitizenIds"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCitizenIdsResponse) Reset()         { *m = QueryAllCitizenIdsResponse{} }
func (m *QueryAllCitizenIdsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCitizenIdsResponse) ProtoMessage()    {}
func (*QueryAllCitizenIdsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{17}
}
func (m *QueryAllCitizenIdsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCitizenIdsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCitizenIdsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCitizenIdsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCitizenIdsResponse.Merge(m, src)
}
func (m *QueryAllCitizenIdsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCitizenIdsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCitizenIdsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCitizenIdsResponse proto.InternalMessageInfo

func (m *QueryAllCitizenIdsResponse) GetCitizenIds() []CitizenIds {
	if m != nil {
		return m.CitizenIds
	}
	return nil
}

func (m *QueryAllCitizenIdsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCitizensOwnedRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryGetCitizensOwnedRequest) Reset()         { *m = QueryGetCitizensOwnedRequest{} }
func (m *QueryGetCitizensOwnedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCitizensOwnedRequest) ProtoMessage()    {}
func (*QueryGetCitizensOwnedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{18}
}
func (m *QueryGetCitizensOwnedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCitizensOwnedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCitizensOwnedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCitizensOwnedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCitizensOwnedRequest.Merge(m, src)
}
func (m *QueryGetCitizensOwnedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCitizensOwnedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCitizensOwnedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCitizensOwnedRequest proto.InternalMessageInfo

func (m *QueryGetCitizensOwnedRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryGetCitizensOwnedResponse struct {
	CitizensOwned CitizensOwned `protobuf:"bytes,1,opt,name=citizensOwned,proto3" json:"citizensOwned"`
}

func (m *QueryGetCitizensOwnedResponse) Reset()         { *m = QueryGetCitizensOwnedResponse{} }
func (m *QueryGetCitizensOwnedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCitizensOwnedResponse) ProtoMessage()    {}
func (*QueryGetCitizensOwnedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{19}
}
func (m *QueryGetCitizensOwnedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCitizensOwnedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCitizensOwnedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCitizensOwnedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCitizensOwnedResponse.Merge(m, src)
}
func (m *QueryGetCitizensOwnedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCitizensOwnedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCitizensOwnedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCitizensOwnedResponse proto.InternalMessageInfo

func (m *QueryGetCitizensOwnedResponse) GetCitizensOwned() CitizensOwned {
	if m != nil {
		return m.CitizensOwned
	}
	return CitizensOwned{}
}

type QueryAllCitizensOwnedRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCitizensOwnedRequest) Reset()         { *m = QueryAllCitizensOwnedRequest{} }
func (m *QueryAllCitizensOwnedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCitizensOwnedRequest) ProtoMessage()    {}
func (*QueryAllCitizensOwnedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{20}
}
func (m *QueryAllCitizensOwnedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCitizensOwnedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCitizensOwnedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCitizensOwnedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCitizensOwnedRequest.Merge(m, src)
}
func (m *QueryAllCitizensOwnedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCitizensOwnedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCitizensOwnedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCitizensOwnedRequest proto.InternalMessageInfo

func (m *QueryAllCitizensOwnedRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCitizensOwnedResponse struct {
	CitizensOwned []CitizensOwned     `protobuf:"bytes,1,rep,name=citizensOwned,proto3" json:"citizensOwned"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCitizensOwnedResponse) Reset()         { *m = QueryAllCitizensOwnedResponse{} }
func (m *QueryAllCitizensOwnedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCitizensOwnedResponse) ProtoMessage()    {}
func (*QueryAllCitizensOwnedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{21}
}
func (m *QueryAllCitizensOwnedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCitizensOwnedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCitizensOwnedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCitizensOwnedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCitizensOwnedResponse.Merge(m, src)
}
func (m *QueryAllCitizensOwnedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCitizensOwnedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCitizensOwnedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCitizensOwnedResponse proto.InternalMessageInfo

func (m *QueryAllCitizensOwnedResponse) GetCitizensOwned() []CitizensOwned {
	if m != nil {
		return m.CitizensOwned
	}
	return nil
}

func (m *QueryAllCitizensOwnedResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetApprovalRequest struct {
	CitizenId string `protobuf:"bytes,1,opt,name=citizenId,proto3" json:"citizenId,omitempty"`
}

func (m *QueryGetApprovalRequest) Reset()         { *m = QueryGetApprovalRequest{} }
func (m *QueryGetApprovalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetApprovalRequest) ProtoMessage()    {}
func (*QueryGetApprovalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{22}
}
func (m *QueryGetApprovalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovalRequest.Merge(m, src)
}
func (m *QueryGetApprovalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovalRequest proto.InternalMessageInfo

func (m *QueryGetApprovalRequest) GetCitizenId() string {
	if m != nil {
		return m.CitizenId
	}
	return ""
}

type QueryGetApprovalResponse struct {
	Approval Approval `protobuf:"bytes,1,opt,name=approval,proto3" json:"approval"`
}

func (m *QueryGetApprovalResponse) Reset()         { *m = QueryGetApprovalResponse{} }
func (m *QueryGetApprovalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetApprovalResponse) ProtoMessage()    {}
func (*QueryGetApprovalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{23}
}
func (m *QueryGetApprovalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovalResponse.Merge(m, src)
}
func (m *QueryGetApprovalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovalResponse proto.InternalMessageInfo

func (m *QueryGetApprovalResponse) GetApproval() Approval {
	if m != nil {
		return m.Approval
	}
	return Approval{}
}

type QueryAllApprovalRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllApprovalRequest) Reset()         { *m = QueryAllApprovalRequest{} }
func (m *QueryAllApprovalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllApprovalRequest) ProtoMessage()    {}
func (*QueryAllApprovalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{24}
}
func (m *QueryAllApprovalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllApprovalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllApprovalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllApprovalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllApprovalRequest.Merge(m, src)
}
func (m *QueryAllApprovalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllApprovalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllApprovalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllApprovalRequest proto.InternalMessageInfo

func (m *QueryAllApprovalRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllApprovalResponse struct {
	Approval   []Approval          `protobuf:"bytes,1,rep,name=approval,proto3" json:"approval"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllApprovalResponse) Reset()         { *m = QueryAllApprovalResponse{} }
func (m *QueryAllApprovalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllApprovalResponse) ProtoMessage()    {}
func (*QueryAllApprovalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{25}
}
func (m *QueryAllApprovalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllApprovalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllApprovalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllApprovalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllApprovalResponse.Merge(m, src)
}
func (m *QueryAllApprovalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllApprovalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllApprovalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllApprovalResponse proto.InternalMessageInfo

func (m *QueryAllApprovalResponse) GetApproval() []Approval {
	if m != nil {
		return m.Approval
	}
	return nil
}

func (m *QueryAllApprovalResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetApprovalForAllRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryGetApprovalForAllRequest) Reset()         { *m = QueryGetApprovalForAllRequest{} }
func (m *QueryGetApprovalForAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetApprovalForAllRequest) ProtoMessage()    {}
func (*QueryGetApprovalForAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{26}
}
func (m *QueryGetApprovalForAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovalForAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovalForAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovalForAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovalForAllRequest.Merge(m, src)
}
func (m *QueryGetApprovalForAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovalForAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovalForAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovalForAllRequest proto.InternalMessageInfo

func (m *QueryGetApprovalForAllRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryGetApprovalForAllResponse struct {
	ApprovalForAll ApprovalForAll `protobuf:"bytes,1,opt,name=approvalForAll,proto3" json:"approvalForAll"`
}

func (m *QueryGetApprovalForAllResponse) Reset()         { *m = QueryGetApprovalForAllResponse{} }
func (m *QueryGetApprovalForAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetApprovalForAllResponse) ProtoMessage()    {}
func (*QueryGetApprovalForAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{27}
}
func (m *QueryGetApprovalForAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetApprovalForAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetApprovalForAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetApprovalForAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetApprovalForAllResponse.Merge(m, src)
}
func (m *QueryGetApprovalForAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetApprovalForAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetApprovalForAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetApprovalForAllResponse proto.InternalMessageInfo

func (m *QueryGetApprovalForAllResponse) GetApprovalForAll() ApprovalForAll {
	if m != nil {
		return m.ApprovalForAll
	}
	return ApprovalForAll{}
}

type QueryAllApprovalForAllRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllApprovalForAllRequest) Reset()         { *m = QueryAllApprovalForAllRequest{} }
func (m *QueryAllApprovalForAllRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllApprovalForAllRequest) ProtoMessage()    {}
func (*QueryAllApprovalForAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{28}
}
func (m *QueryAllApprovalForAllRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllApprovalForAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllApprovalForAllRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllApprovalForAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllApprovalForAllRequest.Merge(m, src)
}
func (m *QueryAllApprovalForAllRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllApprovalForAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllApprovalForAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllApprovalForAllRequest proto.InternalMessageInfo

func (m *QueryAllApprovalForAllRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllApprovalForAllResponse struct {
	ApprovalForAll []ApprovalForAll    `protobuf:"bytes,1,rep,name=approvalForAll,proto3" json:"approvalForAll"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllApprovalForAllResponse) Reset()         { *m = QueryAllApprovalForAllResponse{} }
func (m *QueryAllApprovalForAllResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllApprovalForAllResponse) ProtoMessage()    {}
func (*QueryAllApprovalForAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5781144943d7d0f3, []int{29}
}
func (m *QueryAllApprovalForAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllApprovalForAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllApprovalForAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllApprovalForAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllApprovalForAllResponse.Merge(m, src)
}
func (m *QueryAllApprovalForAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllApprovalForAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllApprovalForAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllApprovalForAllResponse proto.InternalMessageInfo

func (m *QueryAllApprovalForAllResponse) GetApprovalForAll() []ApprovalForAll {
	if m != nil {
		return m.ApprovalForAll
	}
	return nil
}

func (m *QueryAllApprovalForAllResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "demoonechain.citizen.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "demoonechain.citizen.QueryParamsResponse")
	proto.RegisterType((*QueryGetOwnerRequest)(nil), "demoonechain.citizen.QueryGetOwnerRequest")
	proto.RegisterType((*QueryGetOwnerResponse)(nil), "demoonechain.citizen.QueryGetOwnerResponse")
	proto.RegisterType((*QueryModuleOwnerRequest)(nil), "demoonechain.citizen.QueryModuleOwnerRequest")
	proto.RegisterType((*QueryModuleOwnerResponse)(nil), "demoonechain.citizen.QueryModuleOwnerResponse")
	proto.RegisterType((*QueryGetCitizenRequest)(nil), "demoonechain.citizen.QueryGetCitizenRequest")
	proto.RegisterType((*QueryGetCitizenResponse)(nil), "demoonechain.citizen.QueryGetCitizenResponse")
	proto.RegisterType((*QueryAllCitizenRequest)(nil), "demoonechain.citizen.QueryAllCitizenRequest")
	proto.RegisterType((*QueryAllCitizenResponse)(nil), "demoonechain.citizen.QueryAllCitizenResponse")
	proto.RegisterType((*QueryGetCitizenOwnerRequest)(nil), "demoonechain.citizen.QueryGetCitizenOwnerRequest")
	proto.RegisterType((*QueryGetCitizenOwnerResponse)(nil), "demoonechain.citizen.QueryGetCitizenOwnerResponse")
	proto.RegisterType((*QueryAllCitizenOwnerRequest)(nil), "demoonechain.citizen.QueryAllCitizenOwnerRequest")
	proto.RegisterType((*QueryAllCitizenOwnerResponse)(nil), "demoonechain.citizen.QueryAllCitizenOwnerResponse")
	proto.RegisterType((*QueryGetCitizenIdsRequest)(nil), "demoonechain.citizen.QueryGetCitizenIdsRequest")
	proto.RegisterType((*QueryGetCitizenIdsResponse)(nil), "demoonechain.citizen.QueryGetCitizenIdsResponse")
	proto.RegisterType((*QueryAllCitizenIdsRequest)(nil), "demoonechain.citizen.QueryAllCitizenIdsRequest")
	proto.RegisterType((*QueryAllCitizenIdsResponse)(nil), "demoonechain.citizen.QueryAllCitizenIdsResponse")
	proto.RegisterType((*QueryGetCitizensOwnedRequest)(nil), "demoonechain.citizen.QueryGetCitizensOwnedRequest")
	proto.RegisterType((*QueryGetCitizensOwnedResponse)(nil), "demoonechain.citizen.QueryGetCitizensOwnedResponse")
	proto.RegisterType((*QueryAllCitizensOwnedRequest)(nil), "demoonechain.citizen.QueryAllCitizensOwnedRequest")
	proto.RegisterType((*QueryAllCitizensOwnedResponse)(nil), "demoonechain.citizen.QueryAllCitizensOwnedResponse")
	proto.RegisterType((*QueryGetApprovalRequest)(nil), "demoonechain.citizen.QueryGetApprovalRequest")
	proto.RegisterType((*QueryGetApprovalResponse)(nil), "demoonechain.citizen.QueryGetApprovalResponse")
	proto.RegisterType((*QueryAllApprovalRequest)(nil), "demoonechain.citizen.QueryAllApprovalRequest")
	proto.RegisterType((*QueryAllApprovalResponse)(nil), "demoonechain.citizen.QueryAllApprovalResponse")
	proto.RegisterType((*QueryGetApprovalForAllRequest)(nil), "demoonechain.citizen.QueryGetApprovalForAllRequest")
	proto.RegisterType((*QueryGetApprovalForAllResponse)(nil), "demoonechain.citizen.QueryGetApprovalForAllResponse")
	proto.RegisterType((*QueryAllApprovalForAllRequest)(nil), "demoonechain.citizen.QueryAllApprovalForAllRequest")
	proto.RegisterType((*QueryAllApprovalForAllResponse)(nil), "demoonechain.citizen.QueryAllApprovalForAllResponse")
}

func init() { proto.RegisterFile("citizen/query.proto", fileDescriptor_5781144943d7d0f3) }

var fileDescriptor_5781144943d7d0f3 = []byte{
	// 1259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x98, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0x33, 0xd9, 0x26, 0x6d, 0x27, 0x4d, 0x80, 0x49, 0x1a, 0x1a, 0x67, 0xe3, 0x84, 0x69,
	0x7e, 0xb4, 0x49, 0x76, 0x9d, 0x6c, 0x5a, 0x82, 0x40, 0x48, 0xa4, 0x48, 0xa9, 0x22, 0x81, 0x9a,
	0xee, 0x09, 0x21, 0xa4, 0xe0, 0xac, 0xdd, 0xc5, 0x92, 0x77, 0x67, 0xbb, 0x76, 0x0a, 0x25, 0xca,
	0x05, 0x55, 0x9c, 0x41, 0x88, 0x03, 0x1c, 0x10, 0x1c, 0xe0, 0x80, 0x84, 0x7a, 0x81, 0x03, 0x07,
	0xee, 0x3d, 0x56, 0xe2, 0xc2, 0x09, 0xa1, 0x84, 0x3f, 0xa4, 0xf2, 0xf8, 0xcd, 0xda, 0xe3, 0xf5,
	0xaf, 0x6d, 0x7d, 0xca, 0x66, 0x3c, 0xdf, 0x79, 0x9f, 0xef, 0x7b, 0x33, 0xe3, 0xb7, 0x8b, 0x27,
	0x1b, 0x96, 0x6b, 0x7d, 0x6e, 0xb6, 0xb5, 0xfb, 0x47, 0x66, 0xf7, 0x61, 0xb5, 0xd3, 0x65, 0x2e,
	0x23, 0x53, 0x86, 0xd9, 0x62, 0xac, 0x6d, 0x36, 0x3e, 0xd1, 0xad, 0x76, 0x15, 0x66, 0x28, 0xe5,
	0x26, 0x63, 0x4d, 0xdb, 0xd4, 0xf4, 0x8e, 0xa5, 0xe9, 0xed, 0x36, 0x73, 0x75, 0xd7, 0x62, 0x6d,
	0xc7, 0xd7, 0x28, 0xab, 0x0d, 0xe6, 0xb4, 0x98, 0xa3, 0x1d, 0xea, 0x8e, 0xe9, 0x2f, 0xa6, 0x3d,
	0xd8, 0x3c, 0x34, 0x5d, 0x7d, 0x53, 0xeb, 0xe8, 0x4d, 0xab, 0xcd, 0x27, 0xc3, 0xdc, 0x29, 0x11,
	0xb4, 0xa3, 0x77, 0xf5, 0x96, 0x58, 0xa1, 0x87, 0xc2, 0x3e, 0x6d, 0x9b, 0x5d, 0x18, 0xbc, 0x2c,
	0x06, 0xe1, 0x2f, 0x0c, 0xcf, 0x46, 0x86, 0x0f, 0xc2, 0x9a, 0x99, 0xe8, 0x43, 0xcb, 0x10, 0x31,
	0xca, 0x91, 0x47, 0x0e, 0x17, 0x1a, 0xf0, 0x74, 0x5a, 0x3c, 0xd5, 0x3b, 0x9d, 0x2e, 0x7b, 0xa0,
	0xdb, 0x30, 0xae, 0x46, 0xc7, 0x0f, 0xee, 0xb1, 0xee, 0x81, 0x6e, 0xdb, 0x51, 0x5d, 0xcb, 0x74,
	0x75, 0x43, 0x77, 0xf5, 0x9e, 0x2e, 0x94, 0x13, 0x91, 0x8d, 0x06, 0xb3, 0x7a, 0x79, 0x68, 0xb2,
	0x26, 0xe3, 0x1f, 0x35, 0xef, 0x93, 0x3f, 0x4a, 0xa7, 0x30, 0xb9, 0xeb, 0xe5, 0x6f, 0x9f, 0x27,
	0xa7, 0x6e, 0xde, 0x3f, 0x32, 0x1d, 0x97, 0xde, 0xc5, 0x93, 0xd2, 0xa8, 0xd3, 0x61, 0x6d, 0xc7,
	0x24, 0x6f, 0xe2, 0x51, 0x3f, 0x89, 0x57, 0xd0, 0x02, 0xba, 0x36, 0x56, 0x2b, 0x57, 0xe3, 0x6a,
	0x57, 0xf5, 0x55, 0xb7, 0xce, 0x3d, 0xf9, 0x77, 0x7e, 0xa8, 0x0e, 0x0a, 0x3a, 0x8d, 0xa7, 0xf8,
	0x92, 0xb7, 0x4d, 0xf7, 0x8e, 0x97, 0x3e, 0x11, 0x6a, 0x1f, 0x5f, 0x8e, 0x8c, 0x43, 0xb0, 0x6d,
	0x3c, 0xc2, 0x07, 0x20, 0xd6, 0x6c, 0x7c, 0x2c, 0x3e, 0x05, 0x42, 0xf9, 0xf3, 0xe9, 0x0c, 0x7e,
	0x95, 0xaf, 0xf8, 0x3e, 0x33, 0x8e, 0x6c, 0x53, 0x0a, 0xb6, 0x81, 0xaf, 0xf4, 0x3f, 0x82, 0x78,
	0x53, 0x78, 0x84, 0xf5, 0xe2, 0x5d, 0xac, 0xfb, 0xff, 0xd0, 0xd7, 0xf1, 0xb4, 0xc0, 0x7b, 0xd7,
	0x0f, 0x09, 0x6b, 0x91, 0x32, 0xbe, 0x08, 0x10, 0x7b, 0x06, 0x68, 0x82, 0x01, 0xfa, 0x01, 0x40,
	0x84, 0x75, 0x10, 0xe8, 0x6d, 0x7c, 0x1e, 0xe6, 0x81, 0xb5, 0xb9, 0x78, 0x6b, 0xa0, 0x03, 0x73,
	0x42, 0x43, 0x3f, 0x06, 0xa2, 0x1d, 0xdb, 0x8e, 0x10, 0xed, 0x62, 0x1c, 0xec, 0x7e, 0x58, 0x7b,
	0xb9, 0xea, 0x6f, 0x8b, 0xaa, 0xb7, 0x2d, 0xaa, 0xfe, 0xb9, 0x83, 0xcd, 0x51, 0xdd, 0xd7, 0x9b,
	0x26, 0x68, 0xeb, 0x21, 0x25, 0xfd, 0x09, 0x01, 0x7c, 0x38, 0x44, 0x1c, 0x7c, 0x69, 0x50, 0x78,
	0x72, 0x5b, 0x42, 0x1c, 0xe6, 0x88, 0x2b, 0x99, 0x88, 0x7e, 0x6c, 0x89, 0xf1, 0x2d, 0x3c, 0x1b,
	0xc9, 0x6f, 0xb8, 0xd0, 0x19, 0xc5, 0xb1, 0x71, 0x39, 0x5e, 0x0c, 0x26, 0xdf, 0xc3, 0x97, 0x1a,
	0xa1, 0x71, 0x48, 0x25, 0x4d, 0x75, 0x1a, 0xde, 0x88, 0x92, 0x9a, 0x9a, 0x80, 0x1a, 0x64, 0x53,
	0x42, 0x2d, 0xaa, 0x6a, 0x7f, 0x20, 0x70, 0xd5, 0x17, 0x27, 0xd1, 0x55, 0xe9, 0xf9, 0x5d, 0x15,
	0x57, 0xc9, 0x35, 0x3c, 0x13, 0x29, 0xc6, 0x9e, 0x21, 0x2e, 0x22, 0x32, 0x81, 0x87, 0x2d, 0xbf,
	0x80, 0xe7, 0xea, 0xc3, 0x96, 0x41, 0x0d, 0xac, 0xc4, 0x4d, 0x06, 0x87, 0xbb, 0x18, 0x07, 0xa3,
	0x90, 0xca, 0x85, 0x54, 0x7f, 0x7b, 0x86, 0xb8, 0xa7, 0x42, 0x4a, 0xda, 0x00, 0xa4, 0x20, 0x93,
	0x21, 0xa4, 0xa2, 0xea, 0xf5, 0x1b, 0x02, 0x2f, 0x91, 0x28, 0x09, 0x5e, 0x4a, 0xcf, 0xe7, 0xa5,
	0xb8, 0x3a, 0xdd, 0xe8, 0x3b, 0x34, 0x8e, 0xb7, 0x13, 0x0c, 0x91, 0x97, 0xf8, 0xfb, 0xb3, 0x83,
	0xe7, 0x12, 0x54, 0xe0, 0xf3, 0x0e, 0x1e, 0x6f, 0x84, 0x1f, 0x40, 0x46, 0xaf, 0xa6, 0x5a, 0xf5,
	0xa7, 0x82, 0x5b, 0x59, 0x4f, 0xef, 0xf5, 0x1d, 0x03, 0x99, 0xb3, 0xa8, 0xfa, 0xfd, 0x89, 0xc0,
	0x5a, 0x7f, 0xa0, 0x64, 0x6b, 0xa5, 0x17, 0xb1, 0x56, 0x5c, 0x2d, 0xb7, 0x83, 0xb7, 0xd3, 0x0e,
	0x74, 0x19, 0xf9, 0x6e, 0xce, 0x8f, 0xe0, 0x05, 0x2a, 0x09, 0xc1, 0xee, 0x3b, 0xf8, 0x82, 0x68,
	0x59, 0x20, 0xad, 0x6a, 0xbc, 0x53, 0xa1, 0x04, 0x93, 0x3d, 0x15, 0xd5, 0x83, 0xf7, 0x4e, 0x14,
	0xab, 0xa8, 0xaa, 0xfd, 0x8c, 0xc0, 0x81, 0x14, 0x23, 0xd6, 0x41, 0x69, 0x70, 0x07, 0xc5, 0x55,
	0xe8, 0x66, 0x70, 0x6e, 0x44, 0xb0, 0x5d, 0xd6, 0xdd, 0xb1, 0xed, 0xf4, 0xe3, 0xe6, 0x62, 0x35,
	0x49, 0x06, 0x1e, 0xeb, 0x78, 0x42, 0x97, 0x9e, 0x40, 0x32, 0x17, 0xd3, 0x9d, 0xfa, 0x73, 0xc1,
	0x6f, 0x64, 0x05, 0xda, 0x0c, 0x4e, 0x42, 0x3c, 0x6c, 0x51, 0xd5, 0xfb, 0x0b, 0x81, 0xbf, 0x98,
	0x48, 0x29, 0xfe, 0x4a, 0x2f, 0xe6, 0xaf, 0xb0, 0xaa, 0xd6, 0x1e, 0x4d, 0xe2, 0x11, 0xce, 0x4f,
	0x1e, 0x21, 0x3c, 0xea, 0xf7, 0xc9, 0xe4, 0x5a, 0x3c, 0x59, 0x7f, 0x5b, 0xae, 0x5c, 0xcf, 0x31,
	0xd3, 0x8f, 0x4a, 0x97, 0xbe, 0xf8, 0xfb, 0xff, 0x6f, 0x86, 0xe7, 0xc9, 0x9c, 0xe6, 0x49, 0x2a,
	0x42, 0xa3, 0xc9, 0x5f, 0x86, 0xc8, 0x97, 0x08, 0xba, 0x6c, 0xb2, 0x9a, 0xb2, 0x76, 0xa4, 0x67,
	0x57, 0xd6, 0x72, 0xcd, 0x05, 0x92, 0x45, 0x4e, 0xa2, 0x92, 0x72, 0x02, 0x09, 0xdf, 0xb8, 0xe4,
	0x3b, 0x84, 0xc7, 0x42, 0x5d, 0x39, 0xa9, 0xa4, 0x84, 0xe8, 0x6f, 0xec, 0x95, 0x6a, 0xde, 0xe9,
	0x00, 0xb5, 0xc6, 0xa1, 0x96, 0xc8, 0xd5, 0x04, 0xa8, 0x16, 0xd7, 0xf8, 0x5f, 0xf4, 0xc8, 0xf7,
	0x08, 0x9f, 0x87, 0xdb, 0x99, 0xac, 0xa7, 0x5b, 0x97, 0x3b, 0x72, 0xa5, 0x92, 0x73, 0x36, 0x50,
	0xd5, 0x38, 0xd5, 0x3a, 0x59, 0x4d, 0xa0, 0x12, 0x7f, 0x8f, 0x7b, 0x17, 0xf2, 0x09, 0xf9, 0x1a,
	0xf5, 0x1a, 0x05, 0x6f, 0xab, 0xa6, 0xf1, 0xf5, 0x7d, 0x63, 0x48, 0xe5, 0xeb, 0x6f, 0xfe, 0xe9,
	0x32, 0xe7, 0x5b, 0x20, 0x6a, 0x3a, 0x1f, 0x79, 0x8c, 0xf0, 0xa5, 0x70, 0x03, 0x49, 0x36, 0x73,
	0xe5, 0x41, 0xaa, 0x68, 0x6d, 0x10, 0x09, 0xf0, 0xbd, 0xc1, 0xf9, 0x6a, 0x64, 0x23, 0x9d, 0xcf,
	0x2f, 0xab, 0x94, 0xc5, 0x5f, 0x10, 0x7e, 0x29, 0xbc, 0xa4, 0x97, 0xca, 0xcd, 0x5c, 0xc9, 0xc9,
	0x0d, 0x9d, 0xd0, 0x96, 0xd3, 0x75, 0x0e, 0xbd, 0x4c, 0x16, 0xf3, 0x40, 0x93, 0x1f, 0x51, 0xb8,
	0x2f, 0x24, 0x5a, 0xae, 0x2c, 0x05, 0xdd, 0xab, 0xb2, 0x91, 0x5f, 0x00, 0x7c, 0x1a, 0xe7, 0xbb,
	0x4e, 0x56, 0x32, 0xf8, 0x2c, 0xc3, 0xd1, 0x8e, 0x2d, 0xe3, 0x84, 0xfc, 0x80, 0xf0, 0x78, 0xb0,
	0x8e, 0x97, 0x49, 0x2d, 0x57, 0x5a, 0x72, 0x52, 0xc6, 0xb6, 0xcb, 0x74, 0x95, 0x53, 0x2e, 0x12,
	0x9a, 0x4d, 0xe9, 0x6d, 0xcf, 0x71, 0xa9, 0xdb, 0x22, 0xf9, 0x36, 0x9b, 0xd4, 0x47, 0x2a, 0x5b,
	0x03, 0x69, 0x00, 0xf3, 0x26, 0xc7, 0xd4, 0x48, 0x25, 0x1d, 0x13, 0x7e, 0x29, 0xd2, 0x8e, 0x79,
	0xd1, 0x4f, 0xc8, 0xaf, 0x08, 0xbf, 0x2c, 0x2d, 0xe8, 0x65, 0x35, 0xdf, 0x66, 0xcb, 0x0f, 0x9d,
	0xd4, 0xc7, 0xd2, 0x0a, 0x87, 0x5e, 0x21, 0x4b, 0xb9, 0xa0, 0xbd, 0xfa, 0x5f, 0x10, 0xaf, 0x55,
	0x92, 0x71, 0x03, 0x46, 0xda, 0xbc, 0xd4, 0x7b, 0x3c, 0xa6, 0xe7, 0xa4, 0x5b, 0x1c, 0xad, 0x42,
	0xd6, 0x12, 0xd0, 0xc4, 0x8b, 0x5c, 0x3a, 0xec, 0xdf, 0x22, 0x3c, 0x26, 0x56, 0xf2, 0x12, 0x99,
	0x71, 0x0b, 0x0e, 0xc2, 0x18, 0xd3, 0x55, 0xd2, 0x15, 0xce, 0xf8, 0x1a, 0x99, 0xcf, 0x60, 0x24,
	0xbf, 0x23, 0x3c, 0x21, 0xf7, 0x23, 0x64, 0x2b, 0x5f, 0x3e, 0xa4, 0x6e, 0x4b, 0xb9, 0x31, 0x98,
	0x08, 0x30, 0xb7, 0x39, 0xe6, 0x26, 0xd1, 0x32, 0x30, 0xc5, 0xcf, 0x91, 0xbd, 0xcd, 0xf9, 0x18,
	0xe1, 0x57, 0xe4, 0x35, 0xb3, 0xc8, 0x93, 0xfa, 0xc4, 0x54, 0xf2, 0xc4, 0x96, 0x2f, 0xf3, 0x86,
	0x8a, 0x92, 0xdf, 0xda, 0x7e, 0x72, 0xaa, 0xa2, 0xa7, 0xa7, 0x2a, 0xfa, 0xef, 0x54, 0x45, 0x5f,
	0x9d, 0xa9, 0x43, 0x4f, 0xcf, 0xd4, 0xa1, 0x7f, 0xce, 0xd4, 0xa1, 0x0f, 0xe7, 0xe4, 0x15, 0x3e,
	0xeb, 0xad, 0xe1, 0x3e, 0xec, 0x98, 0xce, 0xe1, 0x28, 0xff, 0xd1, 0x74, 0xeb, 0x59, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x1b, 0xf3, 0x29, 0x9e, 0xc9, 0x16, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Owner by index.
	Owner(ctx context.Context, in *QueryGetOwnerRequest, opts ...grpc.CallOption) (*QueryGetOwnerResponse, error)
	// Queries a list of ModuleOwner items.
	ModuleOwner(ctx context.Context, in *QueryModuleOwnerRequest, opts ...grpc.CallOption) (*QueryModuleOwnerResponse, error)
	// Queries a Citizen by index.
	Citizen(ctx context.Context, in *QueryGetCitizenRequest, opts ...grpc.CallOption) (*QueryGetCitizenResponse, error)
	// Queries a list of Citizen items.
	CitizenAll(ctx context.Context, in *QueryAllCitizenRequest, opts ...grpc.CallOption) (*QueryAllCitizenResponse, error)
	// Queries a CitizenOwner by index.
	CitizenOwner(ctx context.Context, in *QueryGetCitizenOwnerRequest, opts ...grpc.CallOption) (*QueryGetCitizenOwnerResponse, error)
	// Queries a list of CitizenOwner items.
	CitizenOwnerAll(ctx context.Context, in *QueryAllCitizenOwnerRequest, opts ...grpc.CallOption) (*QueryAllCitizenOwnerResponse, error)
	// Queries a CitizenIds by id.
	CitizenIds(ctx context.Context, in *QueryGetCitizenIdsRequest, opts ...grpc.CallOption) (*QueryGetCitizenIdsResponse, error)
	// Queries a list of CitizenIds items.
	CitizenIdsAll(ctx context.Context, in *QueryAllCitizenIdsRequest, opts ...grpc.CallOption) (*QueryAllCitizenIdsResponse, error)
	// Queries a CitizensOwned by index.
	CitizensOwned(ctx context.Context, in *QueryGetCitizensOwnedRequest, opts ...grpc.CallOption) (*QueryGetCitizensOwnedResponse, error)
	// Queries a list of CitizensOwned items.
	CitizensOwnedAll(ctx context.Context, in *QueryAllCitizensOwnedRequest, opts ...grpc.CallOption) (*QueryAllCitizensOwnedResponse, error)
	// Queries a Approval by index.
	Approval(ctx context.Context, in *QueryGetApprovalRequest, opts ...grpc.CallOption) (*QueryGetApprovalResponse, error)
	// Queries a list of Approval items.
	ApprovalAll(ctx context.Context, in *QueryAllApprovalRequest, opts ...grpc.CallOption) (*QueryAllApprovalResponse, error)
	// Queries a ApprovalForAll by index.
	ApprovalForAll(ctx context.Context, in *QueryGetApprovalForAllRequest, opts ...grpc.CallOption) (*QueryGetApprovalForAllResponse, error)
	// Queries a list of ApprovalForAll items.
	ApprovalForAllAll(ctx context.Context, in *QueryAllApprovalForAllRequest, opts ...grpc.CallOption) (*QueryAllApprovalForAllResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/demoonechain.citizen.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Owner(ctx context.Context, in *QueryGetOwnerRequest, opts ...grpc.CallOption) (*QueryGetOwnerResponse, error) {
	out := new(QueryGetOwnerResponse)
	err := c.cc.Invoke(ctx, "/demoonechain.citizen.Query/Owner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ModuleOwner(ctx context.Context, in *QueryModuleOwnerRequest, opts ...grpc.CallOption) (*QueryModuleOwnerResponse, error) {
	out := new(QueryModuleOwnerResponse)
	err := c.cc.Invoke(ctx, "/demoonechain.citizen.Query/ModuleOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Citizen(ctx context.Context, in *QueryGetCitizenRequest, opts ...grpc.CallOption) (*QueryGetCitizenResponse, error) {
	out := new(QueryGetCitizenResponse)
	err := c.cc.Invoke(ctx, "/demoonechain.citizen.Query/Citizen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CitizenAll(ctx context.Context, in *QueryAllCitizenRequest, opts ...grpc.CallOption) (*QueryAllCitizenResponse, error) {
	out := new(QueryAllCitizenResponse)
	err := c.cc.Invoke(ctx, "/demoonechain.citizen.Query/CitizenAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CitizenOwner(ctx context.Context, in *QueryGetCitizenOwnerRequest, opts ...grpc.CallOption) (*QueryGetCitizenOwnerResponse, error) {
	out := new(QueryGetCitizenOwnerResponse)
	err := c.cc.Invoke(ctx, "/demoonechain.citizen.Query/CitizenOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CitizenOwnerAll(ctx context.Context, in *QueryAllCitizenOwnerRequest, opts ...grpc.CallOption) (*QueryAllCitizenOwnerResponse, error) {
	out := new(QueryAllCitizenOwnerResponse)
	err := c.cc.Invoke(ctx, "/demoonechain.citizen.Query/CitizenOwnerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CitizenIds(ctx context.Context, in *QueryGetCitizenIdsRequest, opts ...grpc.CallOption) (*QueryGetCitizenIdsResponse, error) {
	out := new(QueryGetCitizenIdsResponse)
	err := c.cc.Invoke(ctx, "/demoonechain.citizen.Query/CitizenIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CitizenIdsAll(ctx context.Context, in *QueryAllCitizenIdsRequest, opts ...grpc.CallOption) (*QueryAllCitizenIdsResponse, error) {
	out := new(QueryAllCitizenIdsResponse)
	err := c.cc.Invoke(ctx, "/demoonechain.citizen.Query/CitizenIdsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CitizensOwned(ctx context.Context, in *QueryGetCitizensOwnedRequest, opts ...grpc.CallOption) (*QueryGetCitizensOwnedResponse, error) {
	out := new(QueryGetCitizensOwnedResponse)
	err := c.cc.Invoke(ctx, "/demoonechain.citizen.Query/CitizensOwned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CitizensOwnedAll(ctx context.Context, in *QueryAllCitizensOwnedRequest, opts ...grpc.CallOption) (*QueryAllCitizensOwnedResponse, error) {
	out := new(QueryAllCitizensOwnedResponse)
	err := c.cc.Invoke(ctx, "/demoonechain.citizen.Query/CitizensOwnedAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Approval(ctx context.Context, in *QueryGetApprovalRequest, opts ...grpc.CallOption) (*QueryGetApprovalResponse, error) {
	out := new(QueryGetApprovalResponse)
	err := c.cc.Invoke(ctx, "/demoonechain.citizen.Query/Approval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ApprovalAll(ctx context.Context, in *QueryAllApprovalRequest, opts ...grpc.CallOption) (*QueryAllApprovalResponse, error) {
	out := new(QueryAllApprovalResponse)
	err := c.cc.Invoke(ctx, "/demoonechain.citizen.Query/ApprovalAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ApprovalForAll(ctx context.Context, in *QueryGetApprovalForAllRequest, opts ...grpc.CallOption) (*QueryGetApprovalForAllResponse, error) {
	out := new(QueryGetApprovalForAllResponse)
	err := c.cc.Invoke(ctx, "/demoonechain.citizen.Query/ApprovalForAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ApprovalForAllAll(ctx context.Context, in *QueryAllApprovalForAllRequest, opts ...grpc.CallOption) (*QueryAllApprovalForAllResponse, error) {
	out := new(QueryAllApprovalForAllResponse)
	err := c.cc.Invoke(ctx, "/demoonechain.citizen.Query/ApprovalForAllAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Owner by index.
	Owner(context.Context, *QueryGetOwnerRequest) (*QueryGetOwnerResponse, error)
	// Queries a list of ModuleOwner items.
	ModuleOwner(context.Context, *QueryModuleOwnerRequest) (*QueryModuleOwnerResponse, error)
	// Queries a Citizen by index.
	Citizen(context.Context, *QueryGetCitizenRequest) (*QueryGetCitizenResponse, error)
	// Queries a list of Citizen items.
	CitizenAll(context.Context, *QueryAllCitizenRequest) (*QueryAllCitizenResponse, error)
	// Queries a CitizenOwner by index.
	CitizenOwner(context.Context, *QueryGetCitizenOwnerRequest) (*QueryGetCitizenOwnerResponse, error)
	// Queries a list of CitizenOwner items.
	CitizenOwnerAll(context.Context, *QueryAllCitizenOwnerRequest) (*QueryAllCitizenOwnerResponse, error)
	// Queries a CitizenIds by id.
	CitizenIds(context.Context, *QueryGetCitizenIdsRequest) (*QueryGetCitizenIdsResponse, error)
	// Queries a list of CitizenIds items.
	CitizenIdsAll(context.Context, *QueryAllCitizenIdsRequest) (*QueryAllCitizenIdsResponse, error)
	// Queries a CitizensOwned by index.
	CitizensOwned(context.Context, *QueryGetCitizensOwnedRequest) (*QueryGetCitizensOwnedResponse, error)
	// Queries a list of CitizensOwned items.
	CitizensOwnedAll(context.Context, *QueryAllCitizensOwnedRequest) (*QueryAllCitizensOwnedResponse, error)
	// Queries a Approval by index.
	Approval(context.Context, *QueryGetApprovalRequest) (*QueryGetApprovalResponse, error)
	// Queries a list of Approval items.
	ApprovalAll(context.Context, *QueryAllApprovalRequest) (*QueryAllApprovalResponse, error)
	// Queries a ApprovalForAll by index.
	ApprovalForAll(context.Context, *QueryGetApprovalForAllRequest) (*QueryGetApprovalForAllResponse, error)
	// Queries a list of ApprovalForAll items.
	ApprovalForAllAll(context.Context, *QueryAllApprovalForAllRequest) (*QueryAllApprovalForAllResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Owner(ctx context.Context, req *QueryGetOwnerRequest) (*QueryGetOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Owner not implemented")
}
func (*UnimplementedQueryServer) ModuleOwner(ctx context.Context, req *QueryModuleOwnerRequest) (*QueryModuleOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleOwner not implemented")
}
func (*UnimplementedQueryServer) Citizen(ctx context.Context, req *QueryGetCitizenRequest) (*QueryGetCitizenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Citizen not implemented")
}
func (*UnimplementedQueryServer) CitizenAll(ctx context.Context, req *QueryAllCitizenRequest) (*QueryAllCitizenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CitizenAll not implemented")
}
func (*UnimplementedQueryServer) CitizenOwner(ctx context.Context, req *QueryGetCitizenOwnerRequest) (*QueryGetCitizenOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CitizenOwner not implemented")
}
func (*UnimplementedQueryServer) CitizenOwnerAll(ctx context.Context, req *QueryAllCitizenOwnerRequest) (*QueryAllCitizenOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CitizenOwnerAll not implemented")
}
func (*UnimplementedQueryServer) CitizenIds(ctx context.Context, req *QueryGetCitizenIdsRequest) (*QueryGetCitizenIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CitizenIds not implemented")
}
func (*UnimplementedQueryServer) CitizenIdsAll(ctx context.Context, req *QueryAllCitizenIdsRequest) (*QueryAllCitizenIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CitizenIdsAll not implemented")
}
func (*UnimplementedQueryServer) CitizensOwned(ctx context.Context, req *QueryGetCitizensOwnedRequest) (*QueryGetCitizensOwnedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CitizensOwned not implemented")
}
func (*UnimplementedQueryServer) CitizensOwnedAll(ctx context.Context, req *QueryAllCitizensOwnedRequest) (*QueryAllCitizensOwnedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CitizensOwnedAll not implemented")
}
func (*UnimplementedQueryServer) Approval(ctx context.Context, req *QueryGetApprovalRequest) (*QueryGetApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approval not implemented")
}
func (*UnimplementedQueryServer) ApprovalAll(ctx context.Context, req *QueryAllApprovalRequest) (*QueryAllApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovalAll not implemented")
}
func (*UnimplementedQueryServer) ApprovalForAll(ctx context.Context, req *QueryGetApprovalForAllRequest) (*QueryGetApprovalForAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovalForAll not implemented")
}
func (*UnimplementedQueryServer) ApprovalForAllAll(ctx context.Context, req *QueryAllApprovalForAllRequest) (*QueryAllApprovalForAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovalForAllAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoonechain.citizen.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Owner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Owner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoonechain.citizen.Query/Owner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Owner(ctx, req.(*QueryGetOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ModuleOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModuleOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ModuleOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoonechain.citizen.Query/ModuleOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ModuleOwner(ctx, req.(*QueryModuleOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Citizen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCitizenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Citizen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoonechain.citizen.Query/Citizen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Citizen(ctx, req.(*QueryGetCitizenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CitizenAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCitizenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CitizenAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoonechain.citizen.Query/CitizenAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CitizenAll(ctx, req.(*QueryAllCitizenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CitizenOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCitizenOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CitizenOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoonechain.citizen.Query/CitizenOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CitizenOwner(ctx, req.(*QueryGetCitizenOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CitizenOwnerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCitizenOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CitizenOwnerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoonechain.citizen.Query/CitizenOwnerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CitizenOwnerAll(ctx, req.(*QueryAllCitizenOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CitizenIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCitizenIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CitizenIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoonechain.citizen.Query/CitizenIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CitizenIds(ctx, req.(*QueryGetCitizenIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CitizenIdsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCitizenIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CitizenIdsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoonechain.citizen.Query/CitizenIdsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CitizenIdsAll(ctx, req.(*QueryAllCitizenIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CitizensOwned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCitizensOwnedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CitizensOwned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoonechain.citizen.Query/CitizensOwned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CitizensOwned(ctx, req.(*QueryGetCitizensOwnedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CitizensOwnedAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCitizensOwnedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CitizensOwnedAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoonechain.citizen.Query/CitizensOwnedAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CitizensOwnedAll(ctx, req.(*QueryAllCitizensOwnedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Approval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Approval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoonechain.citizen.Query/Approval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Approval(ctx, req.(*QueryGetApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ApprovalAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ApprovalAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoonechain.citizen.Query/ApprovalAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ApprovalAll(ctx, req.(*QueryAllApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ApprovalForAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetApprovalForAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ApprovalForAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoonechain.citizen.Query/ApprovalForAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ApprovalForAll(ctx, req.(*QueryGetApprovalForAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ApprovalForAllAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllApprovalForAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ApprovalForAllAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demoonechain.citizen.Query/ApprovalForAllAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ApprovalForAllAll(ctx, req.(*QueryAllApprovalForAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "demoonechain.citizen.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Owner",
			Handler:    _Query_Owner_Handler,
		},
		{
			MethodName: "ModuleOwner",
			Handler:    _Query_ModuleOwner_Handler,
		},
		{
			MethodName: "Citizen",
			Handler:    _Query_Citizen_Handler,
		},
		{
			MethodName: "CitizenAll",
			Handler:    _Query_CitizenAll_Handler,
		},
		{
			MethodName: "CitizenOwner",
			Handler:    _Query_CitizenOwner_Handler,
		},
		{
			MethodName: "CitizenOwnerAll",
			Handler:    _Query_CitizenOwnerAll_Handler,
		},
		{
			MethodName: "CitizenIds",
			Handler:    _Query_CitizenIds_Handler,
		},
		{
			MethodName: "CitizenIdsAll",
			Handler:    _Query_CitizenIdsAll_Handler,
		},
		{
			MethodName: "CitizensOwned",
			Handler:    _Query_CitizensOwned_Handler,
		},
		{
			MethodName: "CitizensOwnedAll",
			Handler:    _Query_CitizensOwnedAll_Handler,
		},
		{
			MethodName: "Approval",
			Handler:    _Query_Approval_Handler,
		},
		{
			MethodName: "ApprovalAll",
			Handler:    _Query_ApprovalAll_Handler,
		},
		{
			MethodName: "ApprovalForAll",
			Handler:    _Query_ApprovalForAll_Handler,
		},
		{
			MethodName: "ApprovalForAllAll",
			Handler:    _Query_ApprovalForAllAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "citizen/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryModuleOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryModuleOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCitizenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCitizenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCitizenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CitizenId) > 0 {
		i -= len(m.CitizenId)
		copy(dAtA[i:], m.CitizenId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CitizenId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCitizenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCitizenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCitizenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Citizen.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCitizenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCitizenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCitizenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCitizenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCitizenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCitizenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Citizen) > 0 {
		for iNdEx := len(m.Citizen) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Citizen[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCitizenOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCitizenOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCitizenOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CitizenId) > 0 {
		i -= len(m.CitizenId)
		copy(dAtA[i:], m.CitizenId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CitizenId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCitizenOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCitizenOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCitizenOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CitizenOwner.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCitizenOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCitizenOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCitizenOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCitizenOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCitizenOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCitizenOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CitizenOwner) > 0 {
		for iNdEx := len(m.CitizenOwner) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CitizenOwner[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCitizenIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCitizenIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCitizenIdsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCitizenIdsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCitizenIdsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCitizenIdsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CitizenIds.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCitizenIdsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCitizenIdsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCitizenIdsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCitizenIdsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCitizenIdsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCitizenIdsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CitizenIds) > 0 {
		for iNdEx := len(m.CitizenIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CitizenIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCitizensOwnedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCitizensOwnedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCitizensOwnedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCitizensOwnedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCitizensOwnedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCitizensOwnedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CitizensOwned.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCitizensOwnedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCitizensOwnedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCitizensOwnedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCitizensOwnedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCitizensOwnedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCitizensOwnedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CitizensOwned) > 0 {
		for iNdEx := len(m.CitizensOwned) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CitizensOwned[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetApprovalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CitizenId) > 0 {
		i -= len(m.CitizenId)
		copy(dAtA[i:], m.CitizenId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CitizenId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetApprovalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Approval.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllApprovalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllApprovalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllApprovalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllApprovalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllApprovalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllApprovalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Approval) > 0 {
		for iNdEx := len(m.Approval) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Approval[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetApprovalForAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovalForAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovalForAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetApprovalForAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetApprovalForAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetApprovalForAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ApprovalForAll.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllApprovalForAllRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllApprovalForAllRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllApprovalForAllRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllApprovalForAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllApprovalForAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllApprovalForAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ApprovalForAll) > 0 {
		for iNdEx := len(m.ApprovalForAll) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApprovalForAll[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Owner.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryModuleOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryModuleOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCitizenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CitizenId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCitizenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Citizen.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCitizenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCitizenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Citizen) > 0 {
		for _, e := range m.Citizen {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCitizenOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CitizenId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCitizenOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CitizenOwner.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCitizenOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCitizenOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CitizenOwner) > 0 {
		for _, e := range m.CitizenOwner {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCitizenIdsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetCitizenIdsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CitizenIds.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCitizenIdsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCitizenIdsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CitizenIds) > 0 {
		for _, e := range m.CitizenIds {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCitizensOwnedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCitizensOwnedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CitizensOwned.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCitizensOwnedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCitizensOwnedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CitizensOwned) > 0 {
		for _, e := range m.CitizensOwned {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetApprovalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CitizenId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetApprovalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Approval.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllApprovalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllApprovalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Approval) > 0 {
		for _, e := range m.Approval {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetApprovalForAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetApprovalForAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ApprovalForAll.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllApprovalForAllRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllApprovalForAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ApprovalForAll) > 0 {
		for _, e := range m.ApprovalForAll {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCitizenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCitizenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCitizenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CitizenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CitizenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCitizenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCitizenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCitizenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Citizen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Citizen.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCitizenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCitizenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCitizenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCitizenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCitizenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCitizenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Citizen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Citizen = append(m.Citizen, Citizen{})
			if err := m.Citizen[len(m.Citizen)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCitizenOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCitizenOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCitizenOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CitizenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CitizenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCitizenOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCitizenOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCitizenOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CitizenOwner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CitizenOwner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCitizenOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCitizenOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCitizenOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCitizenOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCitizenOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCitizenOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CitizenOwner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CitizenOwner = append(m.CitizenOwner, CitizenOwner{})
			if err := m.CitizenOwner[len(m.CitizenOwner)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCitizenIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCitizenIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCitizenIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCitizenIdsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCitizenIdsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCitizenIdsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CitizenIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CitizenIds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCitizenIdsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCitizenIdsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCitizenIdsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCitizenIdsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCitizenIdsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCitizenIdsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CitizenIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CitizenIds = append(m.CitizenIds, CitizenIds{})
			if err := m.CitizenIds[len(m.CitizenIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCitizensOwnedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCitizensOwnedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCitizensOwnedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCitizensOwnedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCitizensOwnedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCitizensOwnedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CitizensOwned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CitizensOwned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCitizensOwnedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCitizensOwnedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCitizensOwnedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCitizensOwnedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCitizensOwnedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCitizensOwnedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CitizensOwned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CitizensOwned = append(m.CitizensOwned, CitizensOwned{})
			if err := m.CitizensOwned[len(m.CitizensOwned)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApprovalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CitizenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CitizenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApprovalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Approval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllApprovalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllApprovalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllApprovalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllApprovalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllApprovalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllApprovalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approval = append(m.Approval, Approval{})
			if err := m.Approval[len(m.Approval)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApprovalForAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovalForAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovalForAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetApprovalForAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetApprovalForAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetApprovalForAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovalForAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ApprovalForAll.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllApprovalForAllRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllApprovalForAllRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllApprovalForAllRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllApprovalForAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllApprovalForAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllApprovalForAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovalForAll", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovalForAll = append(m.ApprovalForAll, ApprovalForAll{})
			if err := m.ApprovalForAll[len(m.ApprovalForAll)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
