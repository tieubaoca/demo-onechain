syntax = "proto3";
package demoonechain.citizen;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "citizen/params.proto";
import "citizen/owner.proto";
import "citizen/citizen.proto";
import "citizen/citizen_owner.proto";
// this line is used by starport scaffolding # 1
import "citizen/metadata.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";

option go_package = "demo-onechain/x/citizen/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/demo-onechain/citizen/params";
  }
  // Queries a Owner by index.
	rpc Owner(QueryGetOwnerRequest) returns (QueryGetOwnerResponse) {
		option (google.api.http).get = "/demo-onechain/citizen/owner";
	}
// Queries a list of ModuleOwner items.
	rpc ModuleOwner(QueryModuleOwnerRequest) returns (QueryModuleOwnerResponse) {
		option (google.api.http).get = "/demo-onechain/citizen/module_owner";
	}

// Queries a Citizen by index.
	rpc Citizen(QueryGetCitizenRequest) returns (QueryGetCitizenResponse) {
		option (google.api.http).get = "/demo-onechain/citizen/citizen/{citizenId}";
	}

	// Queries a list of Citizen items.
	rpc CitizenAll(QueryAllCitizenRequest) returns (QueryAllCitizenResponse) {
		option (google.api.http).get = "/demo-onechain/citizen/citizen";
	}

// Queries a CitizenOwner by index.
	rpc CitizenOwner(QueryGetCitizenOwnerRequest) returns (QueryGetCitizenOwnerResponse) {
		option (google.api.http).get = "/demo-onechain/citizen/citizen_owner/{citizenId}";
	}

	// Queries a list of CitizenOwner items.
	rpc CitizenOwnerAll(QueryAllCitizenOwnerRequest) returns (QueryAllCitizenOwnerResponse) {
		option (google.api.http).get = "/demo-onechain/citizen/citizen_owner";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetOwnerRequest {}

message QueryGetOwnerResponse {
	Owner Owner = 1 [(gogoproto.nullable) = false];
}
message QueryModuleOwnerRequest {
}

message QueryModuleOwnerResponse {
  string owner = 1;
}

message QueryGetCitizenRequest {
	  string citizenId = 1;

}

message QueryGetCitizenResponse {
	Citizen citizen = 1 [(gogoproto.nullable) = false];
}

message QueryAllCitizenRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCitizenResponse {
	repeated Citizen citizen = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetCitizenOwnerRequest {
	  string citizenId = 1;

}

message QueryGetCitizenOwnerResponse {
	CitizenOwner citizenOwner = 1 [(gogoproto.nullable) = false];
}

message QueryAllCitizenOwnerRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCitizenOwnerResponse {
	repeated CitizenOwner citizenOwner = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
